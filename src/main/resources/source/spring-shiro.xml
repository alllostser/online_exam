<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">

    <!-- 項目自定义的Realm,从数据库中获取用户的安全数据 -->
    <bean id="userRealm" class="com.exam.shiro.UserRealm">
        <!-- 配置缓存管理器-->
        <property name="cacheManager" ref="cacheManager" />
        <!-- 配置加密器 -->
<!--        <property name="credentialsMatcher">-->
<!--            <bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">-->
<!--                <property name="hashAlgorithmName" value="MD5"/> &lt;!&ndash; 加密算法的名称 &ndash;&gt;-->
<!--                <property name="hashIterations" value="1024" /> &lt;!&ndash; 配置加密的次数 &ndash;&gt;-->

<!--            </bean>-->
<!--        </property>-->
    </bean>


    <!-- 配置安全管理器securityManager， 缓存技术: 缓存管理 realm:负责获取处理数据 -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="realm" ref="userRealm" />
        <property name="sessionManager" ref="sessionManager"/>
        <property name="cacheManager" ref="cacheManager" />
    </bean>
<!--    自定义的sessionmanager-->
    <bean name="sessionManager" class="com.exam.shiro.sessionManager.CustomSessionManager">
        <property name="sessionDAO" ref="redisSessionDAO"/>
<!--        <property name="sessionIdCookie" ref="simpleCookie"/>-->
        <property name="sessionIdCookieEnabled" value="false"/>
        <property name="sessionIdUrlRewritingEnabled" value="false"/>
    </bean>
    <bean class="com.exam.config.redisCache" name="redisCache"/>

<!--    <bean id="simpleCookie" class="org.apache.shiro.web.servlet.SimpleCookie">-->
<!--        <constructor-arg name="name" value="shiro.sesssion"/>-->
<!--        <property name="path" value="/"/>-->
<!--    </bean>-->


    <!-- 配置CacheManager对象(不是必须的,主要是为了提高性能,可以对认证信息以及授权信息进行缓存) -->
<!--    <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">-->
<!--        <property name="cacheManagerConfigFile" value="classpath:ehcache.xml"/>-->
<!--    </bean>-->


    <!-- 必须配置lifecycleBeanPostProcessor:管理shiro中常见的对象 -->
    <!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>


    <!--创建bean-->
    <!--    自定义认证过滤器-->
    <bean id="shiroLoginFilter" class="com.exam.shiro.Filter.ShiroLoginFilter"/>
    <!--    自定义登出过滤器-->
    <bean id="shirologoutFilter" class="com.exam.shiro.Filter.ShiroLogoutFilter"/>



    <!-- Shiro过滤器 -->
    <!-- shiro的核心配置:  配置shiroFileter id名必须与web.xml中的filtername保持一致 -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <!-- Shiro的核心安全接口,这个属性是必须的 -->
        <property name="securityManager" ref="securityManager"/>
        <!-- 身份认证失败，则跳转到登录页面的配置 -->
<!--        <property name="loginUrl" value="/login.jsp"/>-->

        <!--在shiroFilter的bean范围下添加自定义过滤器-->
        <property name="filters">
            <util:map>
                <entry key="authc" value-ref="shiroLoginFilter"/>
                <entry key="logout" value-ref="shirologoutFilter"/>
            </util:map>
        </property>
        <!-- 登录成功后的页面 -->
        <property name="successUrl" value="/index.jsp" />
        <!-- 权限认证失败，则跳转到指定页面 -->
        <property name="unauthorizedUrl" value="/unauthorized.jsp"/>
        <!-- Shiro连接约束配置,即过滤链的定义 -->
        <property name="filterChainDefinitions">
            <value>
                <!--    Shiro内置过滤器，可以实现权限相关的拦截器-->
                <!--    常用的过滤器：-->
                <!--     anon：无需认证（登录）可以访问-->
                <!--     authc：必须认证才可以访问-->
                <!--     user：如果使用rememberMe（记住我）的功能可以直接访问-->
                <!--     perms：该资源必须得到资源权限才可以访问-->
                <!--     roles  ：该资源必须得到角色权限才可以访问-->
                /genCaptcha.do=anon
<!--                /user/add.do=roles[admin]-->
                /login.do=anon
                <!-- 退出 -->
                /logout = logout
                <!-- 会调用Subject的logout方法,此方法会将session清空 -->

                <!-- 剩余其他路径，必须认证通过才可以访问 -->
                /** = authc
            </value>
        </property>
    </bean>

    <!-- 开启Shiro注解 -->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
          depends-on="lifecycleBeanPostProcessor"/>
    <!--开启Spring AOC Shiro注解支持-->
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>


</beans>